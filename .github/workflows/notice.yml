name: mermaid-viewer-notice
on:
  pull_request:
    paths:
      - '**/*.md'
permissions:
  contents: read
jobs:
  mermaid-viewer-notice:
    name: Add Mermaid Viewer Link to PR
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@20576b4b9ed46d41e2d45a2256e5e2316dde6834 # v43.0.1
        with:
          separator: ","
          files: |
            **/*.md
      - name: Show changed files
        run: echo "${{ steps.changed-files.outputs.all_changed_files }}"
      - name: Add notice to PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("node:fs/promises");
            const positionals = process.env.CHANGED_FILES.split(",").filter(Boolean);
            const fileContents = await Promise.all(positionals.map(async (file) => {
                return {
                    name: file,
                    content: await fs.readFile(file, 'utf-8')
                }
            }));
            const compress = async (target) => {
                const arrayBufferToBinaryString = (arrayBuffer) => {
                    const bytes = new Uint8Array(arrayBuffer);
                    let binaryString = "";
                    for (let i = 0; i < bytes.byteLength; i++) {
                        binaryString += String.fromCharCode(bytes[i]);
                    }
                    return binaryString;
                };
                const blob = new Blob([target]);
                const stream = blob.stream();
                const compressedStream = stream.pipeThrough(
                    new CompressionStream("deflate")
                );
                const buf = await new Response(compressedStream).arrayBuffer();
                const binaryString = arrayBufferToBinaryString(buf);
                return btoa(binaryString);
            };
            for (const fileContent of fileContents) {
                const { content } = fileContent;
                const mermaidCodes = content.matchAll(/```mermaid([\s\S]*?)```/g);
                for (const mermaidCode of mermaidCodes) {
                    const mermaidText = mermaidCode[1];
                    const compressed = await compress(mermaidText);
                    const startLine = content.slice(0, mermaidCode.index).split("\n").length;
                    const endLine = content.slice(0, mermaidCode.index + mermaidCode[0].length).split("\n").length;
                    console.log(`file: ${fileContent.name}, startColumn: ${mermaidCode.index}, endColumn: ${mermaidCode.index + mermaidCode[0].length}, startLine: ${startLine}, endLine: ${endLine}`);
                    core.summary.addCodeBlock(`${mermaidText}`, 'mermaid');
                    core.summary.addLink('Mermaid Viewer', `https://newmo-oss.github.io/mermaid-viewer/#${compressed}`);
                    core.summary.addSeparator();
                    core.summary.write({overwrite: true})
                    core.notice(`https://newmo-oss.github.io/mermaid-viewer/#${compressed}`, { title: "Mermaid Viewer", file: fileContent.name, startLine, endLine });
                }
            }
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
